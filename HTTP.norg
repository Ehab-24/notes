
* HTTP/1.1
  - Web browsers make 6 (max limit allowed by HTTP/1.1) TCP connections per origin and send requests for that origin on those connections
  - HTTP/1.1 is a text-based protocol, which means that the HTTP client and the HTTP server exchange text messages.

** Architecture
   IP -> TCP ->TLS (optional) -> HTTP/1.1

** Problems
   - Head-of-line blocking


* HTTP/2
  - Multiplexing
  - Header compression
  - Server push
  - Web browsers make one TCP connection per origin and send all requests for that origin on that connection
  - HTTP/2 is a binary protocol, which means that the HTTP client and the HTTP server exchange binary streams.

** Architecture
   - IP -> TCP -> TLS 1.2 -> HTTP/2
   - 6 round trips to establish a HTTP/2 connection

*** TCP
    - One and a half (effectively 2) round trips to establish a TCP connection
    - Unique connection id: IP address + port number
*** TLS
    - Four round trips to establish a TLS session



* HTTP/3

** Architecture
   - IP -> UDP -> QUIC -> HTTP/3

*** QUIC
    - uses TLS 1.3 for encryption
    - QUIC is connectionless and leverages UDP 
    - QUIC is a binary protocol, which means that the HTTP client and the HTTP server exchange binary streams.
    - 1 or 2 round trips to establish a QUIC connection
    - TCP and UDP live in kernel space, while QUIC lives in user space
    -- QUIC can be updated without updating the kernel which means faster adoption of new features
    -- However, QUIC is not as optimized as TCP and UDP
    - Unique connection id: IP address + port number + connection id 
    
**** Advantage
     - QUIC is connectionless and leverages UDP, which means that it can be used to send multiple HTTP requests on a single connection without waiting for the previous response to arrive
     - In case of packet loss, only the stream that lost the packet needs gets blocked, not the entire connection. Therefore, you get stream compaction instead of entire connection compaction.

** References
   - [What are QUIC and HTTP/3?]{https://www.nginx.com/resources/glossary/quic-http3/}


* Congestion control
